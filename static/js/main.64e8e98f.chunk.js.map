{"version":3,"sources":["helpers.js","apis/api.js","LoadingIndicator.js","features/Movies/moviesSlice.js","features/detail/detailSlice.js","features/genres/genreSlice.js","features/search/searchSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["pathToImage","path","reformatItems","items","map","item","axios","create","baseURL","params","api_key","process","language","genreMap","id","name","findGenreId","genreName","result","find","g","Number","React","memo","styled","className","classnames","movie_url","fetchMovies","createAsyncThunk","a","responses","url","get","resp","push","data","results","moviesSlice","createSlice","initialState","collections","movies","tvSeries","status","reducers","extraReducers","pending","state","action","fulfilled","payload","nowPlaying","topRated","popular","upcoming","onAir","tvToprated","tvPopular","moviesSelector","tvSeriesSelector","fetchDetail","movieType","urls","response","detailSlice","detail","video","recommendations","isLoading","videos","recommended","key","detailSelector","videoSelector","recommendSelector","isLoadingSelector","fetchGenre","page","with_genres","genreSlice","pageNumbers","total_pages","colectionSeletor","genre","fetchSearch","searchTerm","query","searchSlice","search","Home","lazy","Detail","Header","GenreMovies","SearchMovies","App","fallback","LoadingIndicator","component","from","to","exact","store","configureStore","reducer","moviesReducer","detailReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64e8e98f.chunk.js","sourcesContent":["export const pathToImage = path => {\r\n    const ORIGIN = 'http://image.tmdb.org/t/p/original';\r\n    const notFound =\r\n    'https://wompampsupport.azureedge.net/fetchimage?siteId=7575&v=2&jpgQuality=100&width=700&url=https%3A%2F%2Fi.kym-cdn.com%2Fentries%2Ficons%2Ffacebook%2F000%2F019%2F277%2Fconfusedtravolta.jpg';\r\n    return path ? ORIGIN + path : notFound;\r\n}\r\n\r\n\r\n\r\nexport const reformatItems = items => {\r\n    return items.map(item => ({\r\n        ...item,\r\n        \"backdrop_path\": pathToImage(item[\"backdrop_path\"]),\r\n        \"poster_path\": pathToImage(item[\"poster_path\"])\r\n\r\n\r\n    }))\r\n}","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n    params: {\r\n        api_key: process.env.REACT_APP_API_KEY,\r\n        language: \"en-US\",\r\n    },\r\n})\r\n\r\n\r\nexport const genreMap = [\r\n     {\r\n      id: 12,\r\n      name: 'Adventure',\r\n    },\r\n     {\r\n      id: 14,\r\n      name: 'Fantasy',\r\n    },\r\n    {\r\n      id: 16,\r\n      name: 'Animation',\r\n    },\r\n    {\r\n      id: 18,\r\n      name: 'Drama',\r\n    },\r\n     {\r\n      id: 27,\r\n      name: 'Horror',\r\n    },\r\n     {\r\n      id: 28,\r\n      name: 'Action',\r\n    },\r\n     {\r\n      id: 35,\r\n      name: 'Comedy',\r\n    },\r\n    {\r\n      id: 36,\r\n      name: 'History',\r\n    },\r\n     {\r\n      id: 37,\r\n      name: 'Western',\r\n    },\r\n     {\r\n      id: 53,\r\n      name: 'Thriller',\r\n    },\r\n     {\r\n      id: 80,\r\n      name: 'Crime',\r\n    },\r\n     {\r\n      id: 99,\r\n      name: 'Documentary',\r\n    },\r\n     {\r\n      id: 878,\r\n      name: 'Science Fiction',\r\n    },\r\n     {\r\n      id: 9648,\r\n      name: 'Mystery',\r\n    },\r\n    {\r\n      id: 10402,\r\n      name: 'Music',\r\n    },\r\n    {\r\n      id: 10749,\r\n      name: 'Romance',\r\n    },\r\n    {\r\n      id: 10751,\r\n      name: 'Family',\r\n    },\r\n     {\r\n      id: 10752,\r\n      name: 'War',\r\n    },\r\n   {\r\n      id: 10759,\r\n      name: 'Action & Adventure',\r\n    },\r\n   {\r\n      id: 10762,\r\n      name: 'Kids',\r\n    },\r\n    {\r\n      id: 10763,\r\n      name: 'News',\r\n    },\r\n   {\r\n      id: 10764,\r\n      name: 'Reality',\r\n    },\r\n     {\r\n      id: 10765,\r\n      name: 'Sci-Fi & Fantasy',\r\n    },\r\n     {\r\n      id: 10766,\r\n      name: 'Soap',\r\n    },\r\n    {\r\n      id: 10767,\r\n      name: 'Talk',\r\n    },\r\n    {\r\n      id: 10768,\r\n      name: 'War & Politics',\r\n    },\r\n     {\r\n      id: 10770,\r\n      name: 'TV Movie',\r\n    },\r\n];\r\n\r\n\r\n\r\nexport const findGenreId = (genreName) => {\r\n\r\n   const result = genreMap.find(g => g.name === genreName)\r\n   return Number(result.id)\r\n\r\n}","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default React.memo(styled(({ className }) => (\r\n  <div className={classnames(\"loader\", className)}>\r\n    <span className=\"loader__ball loader__ball--1\" />\r\n    <span className=\"loader__ball loader__ball--2\" />\r\n    <span className=\"loader__ball loader__ball--3\" />\r\n  </div>\r\n))`\r\n  display: flex;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  span.loader__ball {\r\n    display: inline-block;\r\n    margin: auto 0.25rem;\r\n    height: 0.75rem;\r\n    width: 0.75rem;\r\n    border-radius: 0.375rem;\r\n    background: #ff6608;\r\n\r\n    &.loader__ball--1,\r\n    &.loader__ball--2,\r\n    &.loader__ball--3 {\r\n      animation: bulging 2s infinite ease-in-out;\r\n    }\r\n\r\n    &.loader__ball--1 {\r\n      animation-delay: -0.4s;\r\n    }\r\n\r\n    &.loader__ball--2 {\r\n      animation-delay: -0.2s;\r\n    }\r\n\r\n    @keyframes bulging {\r\n      0%,\r\n      80%,\r\n      100% {\r\n        transform: scale(0);\r\n        opacity: 0.5;\r\n      }\r\n      40% {\r\n        transform: scale(1);\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n`);\r\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from '../../apis/api'\r\nimport {reformatItems} from '../../helpers'\r\n\r\nconst movie_url = [\r\n    '/movie/now_playing',\r\n    '/movie/top_rated',\r\n    '/movie/popular',\r\n    '/movie/upcoming',\r\n    //\r\n    '/tv/on_the_air',\r\n    '/tv/top_rated',\r\n    '/tv/popular',\r\n]\r\n\r\nexport const fetchMovies = createAsyncThunk('movies/fetchMovies', async () => {\r\n    const responses = [];\r\n    for(let url of movie_url){\r\n        const resp = await axios.get(url);\r\n        responses.push(reformatItems(resp.data.results))\r\n    }\r\n    return responses;\r\n})\r\n\r\nconst moviesSlice = createSlice({\r\n    name: 'movies',\r\n    initialState: {\r\n        collections: {\r\n            movies: {},\r\n            tvSeries: {},\r\n        },\r\n        status: \"idle\",\r\n    },\r\n    reducers: {\r\n       \r\n    },\r\n    extraReducers:{\r\n        [fetchMovies.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchMovies.fulfilled]: (state, action) => {\r\n            state.status = 'succeeded'\r\n            const [\r\n                nowPlaying, \r\n                topRated, \r\n                popular, \r\n                upcoming, \r\n                onAir, \r\n                tvToprated, \r\n                tvPopular\r\n            ] = action.payload;\r\n            state.collections.movies = {\r\n                ...state.collections.movies, \r\n                nowPlaying, \r\n                topRated, \r\n                popular, \r\n                upcoming\r\n            }\r\n            state.collections.tvSeries = {\r\n                ...state.collections.tvSeries, \r\n                onAir, \r\n                tvToprated, \r\n                tvPopular \r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const moviesSelector = state => state.movies.collections.movies;\r\n\r\nexport const tvSeriesSelector = state => state.movies.collections.tvSeries;\r\n\r\n\r\nexport default moviesSlice.reducer;","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from '../../apis/api'\r\nimport {pathToImage, reformatItems} from '../../helpers'\r\n\r\n\r\nexport const fetchDetail = createAsyncThunk('detail/fetchDetail', async ({id, movieType}) =>{\r\n    // console.log(id);\r\n    // console.log(movieType);\r\n    const urls = [\r\n        `/${movieType}/${id}`,\r\n        `/${movieType}/${id}/videos`,\r\n        `/${movieType}/${id}/recommendations`\r\n    ]\r\n\r\n    const response = [];\r\n    for (let url of urls ){\r\n        const resp = await axios.get(url);\r\n        \r\n\r\n        response.push(resp.data)\r\n        \r\n    }\r\n   \r\n    return response;\r\n\r\n\r\n})\r\n\r\nconst detailSlice = createSlice({\r\n    name: 'detail',\r\n    initialState:{\r\n        detail: {},\r\n        video: \"\",\r\n        recommendations:[],\r\n        isLoading: true\r\n    },\r\n    reducers:{\r\n       \r\n\r\n    },\r\n    extraReducers:{\r\n        [fetchDetail.pending]: (state, action) => {\r\n           state.isLoading= true;\r\n        },\r\n\r\n        [fetchDetail.fulfilled]: (state, action) => {\r\n            state.isLoading = false\r\n            const [detail, videos, recommended] = action.payload\r\n            state.detail = {\r\n                ...detail,\r\n                \"backdrop_path\": pathToImage(detail[\"backdrop_path\"]),\r\n                \"poster_path\": pathToImage(detail[\"poster_path\"]),\r\n        \r\n            }\r\n            state.video = `https://www.youtube.com/watch?v=${videos.results[0]?.key}`\r\n            state.recommendations = reformatItems(recommended.results)\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const detailSelector = state => state.detail.detail;\r\nexport const videoSelector = state => state.detail.video\r\nexport const recommendSelector = state => state.detail.recommendations\r\nexport const isLoadingSelector = state => state.detail.isLoading\r\nexport default detailSlice.reducer","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport axios, { findGenreId } from '../../apis/api'\r\nimport {reformatItems} from '../../helpers'\r\n\r\nexport const fetchGenre = createAsyncThunk('genre/fetchGenre', async ({genreName, page}) => {\r\n    const urls = [\r\n        'discover/movie',\r\n        'discover/tv'\r\n    ]\r\n\r\n    const responses = [];\r\n    for(let url of urls){\r\n        const resp = await axios.get(url, {\r\n            params: {\r\n                page,\r\n                with_genres: findGenreId(genreName),\r\n               \r\n            }\r\n        });\r\n        \r\n        responses.push(resp.data);\r\n    }\r\n\r\n    return responses;\r\n\r\n})\r\n\r\nconst genreSlice = createSlice({\r\n    name: 'genre',\r\n    initialState:{\r\n        isLoading: true,\r\n        collections: {\r\n            movies: [],\r\n            tvSeries: [],\r\n            pageNumbers: 0\r\n        },\r\n        \r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n\r\n        [fetchGenre.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        [fetchGenre.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            const [movies, tvSeries] = action.payload;\r\n            state.collections.movies = reformatItems(movies.results);\r\n            state.collections.tvSeries = reformatItems(tvSeries.results);\r\n            state.collections.pageNumbers = movies.total_pages > tvSeries.total_pages  \r\n                                                                ? movies.total_pages \r\n                                                                : tvSeries.total_pages;\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const colectionSeletor = state => state.genre.collections;\r\nexport const isLoadingSelector = state => state.genre.isLoading\r\nexport default genreSlice.reducer","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport axios from '../../apis/api'\r\nimport {reformatItems} from '../../helpers'\r\n\r\n\r\nexport const fetchSearch = createAsyncThunk('search/fetchSearch', async ({searchTerm, page}) => {\r\n    const urls =[\r\n        'search/movie',\r\n        'search/tv'\r\n    ]\r\n\r\n    const responses = []\r\n    for(let url of urls){\r\n        const resp = await axios.get(url, \r\n         { \r\n        params:{\r\n            page,\r\n            query: searchTerm,\r\n        }})\r\n        \r\n        responses.push(resp.data)\r\n    }\r\n    return responses;\r\n})\r\n\r\nconst searchSlice = createSlice({\r\n    name: 'search',\r\n    initialState: {\r\n        isLoading: true,\r\n        collections: {\r\n            movies: [],\r\n            tvSeries: [],\r\n            pageNumbers: 0\r\n        },\r\n    },\r\n    reducers: {},\r\n    extraReducers:{\r\n        [fetchSearch.pending]: (state) => {\r\n            state.isLoading = true\r\n        },\r\n        [fetchSearch.fulfilled]: (state, action) => {\r\n            state.isLoading = false;\r\n            const [movies, tvSeries] = action.payload\r\n            state.collections.movies = reformatItems(movies.results)\r\n            state.collections.tvSeries = reformatItems(tvSeries.results);\r\n            state.collections.pageNumbers = movies.total_pages > tvSeries.total_pages  \r\n                                                                ? movies.total_pages \r\n                                                                : tvSeries.total_pages;\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const colectionSeletor = state => state.search.collections;\r\nexport const isLoadingSelector = state => state.search.isLoading\r\nexport default searchSlice.reducer","import React, {Suspense} from 'react';\nimport './App.css'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport LoadingIndicator from './LoadingIndicator';\n\nconst Home = React.lazy(() => import('./components/Home'))\nconst Detail = React.lazy(() => import('./components/Detail'))\nconst Header = React.lazy(() => import('./components/Nav/Navbar'))\nconst GenreMovies = React.lazy(() => import('./components/GenreMovies'))\nconst SearchMovies = React.lazy(() => import('./components/SearchMovies'))\n\n\nfunction App() {\n  return (\n    \n    <Suspense fallback={<LoadingIndicator/>}>\n      <div className=\"App\">\n          <Header/>\n          <Switch>\n          <Route  path=\"/search\" component={SearchMovies}/>\n          <Route  path=\"/discover/:genreName/:page\" component={GenreMovies}/>\n          <Route  path=\"/:movieType/:id\" component={Detail} />\n          \n          <Route  path=\"/movie\" component={Home}/>\n          <Redirect from=\"/theMovieDB\" to=\"/movie\" exact />\n          </Switch>   \n      </div>\n </Suspense>\n  \n     \n  \n   \n    \n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport moviesReducer from '../features/Movies/moviesSlice'\nimport detailReducer from '../features/detail/detailSlice'\nimport genreSlice from '../features/genres/genreSlice'\nimport searchSlice from '../features/search/searchSlice'\nexport const store = configureStore({\n  reducer: {\n    movies:  moviesReducer,\n    detail: detailReducer,\n    genre: genreSlice,\n    search: searchSlice\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}